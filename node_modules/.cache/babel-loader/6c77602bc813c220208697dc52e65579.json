{"ast":null,"code":"var _jsxFileName = \"/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/Areas';\nimport { Button } from '../styles/Button';\nimport { Slider } from '../styles/molecules/Slider';\nimport { PageOuterWrapper, SimpleFlexWrapper } from '../styles/PageWrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown';\nconst InputField = styled(InputArea)`\n\n    height: 30vh;\n    margin-bottom: 30px;\n    margin-top: 10px;\n`;\nconst OutputField = styled(OutputArea)`\n\n    height: 30vh;\n`;\nconst WrapAreas = styled(PageOuterWrapper)`\n    width: 60%;\n`;\n\nconst ConfigGeneration = () => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [output, setOutput] = useState(\"Output\");\n  const [isClipBChecked, setIsClipBChecked] = useState(true);\n  const [isRopChecked, setIsRopChecked] = useState(true);\n  const sspNames = ['criteo', 'yieldlab'];\n\n  const configResult = () => {// setOutput();\n  };\n\n  const Simple = styled.div`\n`;\n  const ConfigSetting = styled(SimpleFlexWrapper)`\n        // justify-content: flex-start;\n        // justify-content: space-between;\n        // max-width: 60%;\n        // @media(max-width: 1439px) {\n        //     max-width: 70%;\n        // }\n        // @media(max-width: 1400px) {\n        //     flex-flow: column;\n        //     min-width: 229px\n        // }\n    `;\n  return React.createElement(SimpleFlexWrapper, {\n    top: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(WrapAreas, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    name: \"ROP\",\n    changeDesign: true,\n    checked: isRopChecked,\n    onChange: () => setIsRopChecked(!isRopChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(Slider, {\n    name: \"Save to clipboard\",\n    checked: isClipBChecked,\n    onChange: () => setIsClipBChecked(!isClipBChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(Dropdown, {\n    name: \"Choose SSP\",\n    sspNames: sspNames,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(OutputField, {\n    style: {\n      color: output === \"Output\" ? \" grey\" : null\n    },\n    dangerouslySetInnerHTML: {\n      __html: output\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Generate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })));\n};\n\nexport { ConfigGeneration };","map":{"version":3,"sources":["/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js"],"names":["React","useState","useEffect","styled","InputArea","OutputArea","Button","Slider","PageOuterWrapper","SimpleFlexWrapper","Dropdown","InputField","OutputField","WrapAreas","ConfigGeneration","output","setOutput","isClipBChecked","setIsClipBChecked","isRopChecked","setIsRopChecked","sspNames","configResult","Simple","div","ConfigSetting","color","__html"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,iBAAtC;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,uBAApD;AACA,SAASC,QAAT,QAAyB,8BAAzB;AAEA,MAAMC,UAAU,GAAGR,MAAM,CAACC,SAAD,CAAY;;;;;CAArC;AAOA,MAAMQ,WAAW,GAAGT,MAAM,CAACE,UAAD,CAAa;;;CAAvC;AAKA,MAAMQ,SAAS,GAAGV,MAAM,CAACK,gBAAD,CAAmB;;CAA3C;;AAIA,MAAMM,gBAAgB,GAAG,MAAM;AAC3B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,QAAD,CAApC;AACA,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsCjB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,IAAD,CAAhD;AAIA,QAAMoB,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAjB;;AACA,QAAMC,YAAY,GAAG,MAAM,CACvB;AACH,GAFD;;AAIA,QAAMC,MAAM,GAAGpB,MAAM,CAACqB,GAAI;CAA1B;AAGA,QAAMC,aAAa,GAAGtB,MAAM,CAACM,iBAAD,CAAoB;;;;;;;;;;;KAAhD;AAaA,SACI,oBAAC,iBAAD;AAAmB,IAAA,GAAG,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGQ,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,KAAd;AAAqB,IAAA,YAAY,EAAE,IAAnC;AAAyC,IAAA,OAAO,EAAEU,YAAlD;AAAgE,IAAA,QAAQ,EAAE,MAAMC,eAAe,CAAC,CAACD,YAAF,CAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,EAIQ,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,mBAAd;AAAmC,IAAA,OAAO,EAAEF,cAA5C;AAA4D,IAAA,QAAQ,EAAE,MAAMC,iBAAiB,CAAC,CAACD,cAAF,CAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,EAKQ,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAE,YAAhB;AAA8B,IAAA,QAAQ,EAAEI,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALR,EAQI,oBAAC,UAAD;AAAY,IAAA,WAAW,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE;AAAEK,MAAAA,KAAK,EAAGX,MAAM,KAAK,QAAZ,GAAwB,OAAxB,GAAkC;AAA3C,KAApB;AAAuE,IAAA,uBAAuB,EAAE;AAAEY,MAAAA,MAAM,EAAEZ;AAAV,KAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAUI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADJ,CADJ;AAgBH,CA7CD;;AA+CA,SAASD,gBAAT","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/Areas'\nimport { Button } from '../styles/Button'\nimport { Slider } from '../styles/molecules/Slider'\nimport { PageOuterWrapper, SimpleFlexWrapper } from '../styles/PageWrapper'\nimport { Dropdown } from '../styles/molecules/Dropdown';\n\nconst InputField = styled(InputArea)`\n\n    height: 30vh;\n    margin-bottom: 30px;\n    margin-top: 10px;\n`;\n\nconst OutputField = styled(OutputArea)`\n\n    height: 30vh;\n`;\n\nconst WrapAreas = styled(PageOuterWrapper)`\n    width: 60%;\n`;\n\nconst ConfigGeneration = () => {\n    // Declare a new state variable, which we'll call \"count\"\n    const [output, setOutput] = useState(\"Output\");\n    const [isClipBChecked, setIsClipBChecked] = useState(true);\n    const [isRopChecked, setIsRopChecked] = useState(true);\n\n\n\n    const sspNames = ['criteo', 'yieldlab'];\n    const configResult = () => {\n        // setOutput();\n    }\n\n    const Simple = styled.div`\n`;\n\n    const ConfigSetting = styled(SimpleFlexWrapper)`\n        // justify-content: flex-start;\n        // justify-content: space-between;\n        // max-width: 60%;\n        // @media(max-width: 1439px) {\n        //     max-width: 70%;\n        // }\n        // @media(max-width: 1400px) {\n        //     flex-flow: column;\n        //     min-width: 229px\n        // }\n    `;\n\n    return (\n        <SimpleFlexWrapper top=\"30px\">\n            <WrapAreas>\n                {/* <ConfigSetting> */}\n                {/* <Simple> */}\n                    <Slider name={\"ROP\"} changeDesign={true} checked={isRopChecked} onChange={() => setIsRopChecked(!isRopChecked)} />\n                    <Slider name={\"Save to clipboard\"} checked={isClipBChecked} onChange={() => setIsClipBChecked(!isClipBChecked)} />\n                    <Dropdown name={\"Choose SSP\"} sspNames={sspNames} />\n                {/* </Simple> */}\n                {/* </ConfigSetting> */}\n                <InputField placeholder=\"Input\" />\n                <OutputField style={{ color: (output === \"Output\") ? \" grey\" : null }} dangerouslySetInnerHTML={{ __html: output }}></OutputField>\n                <Button name={\"Generate\"} />\n            </WrapAreas>\n        </SimpleFlexWrapper>\n    );\n}\n\nexport { ConfigGeneration };\n"]},"metadata":{},"sourceType":"module"}