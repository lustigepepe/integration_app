{"ast":null,"code":"var _jsxFileName = \"/Users/hagen.handtke/Documents/urban_integration/src/components/SlotsGeneration.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useForm } from \"react-hook-form\";\nimport { InputArea, OutputArea } from '../styles/InputOutputFields'; // import { Button } from '../styles/Buttons';\n\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { InputText } from '../styles/InputOutputFields';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/Wrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown'; // import { configGenration } from '../services/ConfigGeneration'\n\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helpers';\nimport { StandardInput } from '../styles/molecules/StandardInput';\nimport { navigate } from \"@reach/router\";\nimport { ButtonElement } from '../styles/Buttons';\nconst InputField = styled(InputArea)`\n    flex: 0 0 ${props => props.height ? props.height : '30%'};\n    margin-top: 14px;\n    outline: none;\n    // @media(max-width: 1363px) {\n    //     flex: 0 0 48%;\n    // }\n    // @media(max-width: 550px) {\n    //     flex: 0 0 46%;\n    // }\n`;\nconst UnitNameWrapper = styled.div`\n    margin: 20px 0  50px 0;\n`;\n\nconst ButtonArea = props => React.createElement(SimpleFlexWrapper, {\n  justify: props.justify,\n  top: props.top,\n  style: {\n    marginBottom: '50px'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, React.createElement(ButtonElement, Object.assign({\n  id: \"button1\",\n  bColor: props.color1\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}), props.name1), React.createElement(ButtonElement, Object.assign({\n  id: \"button2\",\n  bColor: props.color2,\n  marginL: \"15px\"\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37\n  },\n  __self: this\n}), props.name2));\n\nconst UnitName = props => React.createElement(UnitNameWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}, React.createElement(InputText, {\n  name: \"exampleRequired\",\n  ref: props.register({\n    required: true\n  }),\n  marginLR: props.marginLR,\n  style: {\n    width: '100%'\n  },\n  placeholder: \"Unit name\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}));\n\nconst InputPageName = styled(InputField)`\n    flex: 0 0 150px;\n    height: 24px;\n    resize: none;\n    border: none;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    margin: 0;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    @media(max-width: 1401px) {\n        flex: 0 0 10%;\n    }\n`;\nconst DistanceInput = styled.div`\n    margin-top: 14px;\n`;\nconst OutputField = styled(OutputArea)`\n    flex: 0 0 30vh;\n    margin-top: 14px;\n    padding: 2px 0 0 2px;\n\n`;\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1624px) {\n        max-width: 70%;\n\n    }\n    @media(max-width: 1160px) {\n        flex-flow: column;\n        // min-width: 229px\n        max-width: 40px;\n    }\n`;\nconst ConfigWrapper = styled.div`\n    margin: 50px 0 0 0;\n`;\nconst Distance = styled.div`\n    width: 15px;\n`;\nconst Warning = styled.div`\n    font-weight: 500;\n    ${fontSetting};\n    display: {props => props.display? props.display : false };\n    color: #c82333;\n`;\n\nconst SlotsGeneration = () => {\n  const onSubmit = data => console.log('SlotsGeneration: ', data);\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm(); // Declare a new state variable, which we'll call \"count\"\n\n  const [output, setOutput] = useState(\"Output\");\n  const [inConfig, setInConfig] = useState([]);\n  const [inSlots, setInSlots] = useState([]);\n  const [isClipBChecked, setIsClipBChecked] = useState(true);\n  const [isForConfigGeneration, setIsForConfigGeneration] = useState(true);\n  const [warUnitName, setwarUnitName] = useState(false);\n  const [warSize, setwarSize] = useState(false);\n  const [inPageName, setInPageName] = useState('');\n  const [unitName, setUnitName] = useState('');\n  const [inExpand, setInExpand] = useState('');\n  const [priorityLoad, setPriorityLoad] = useState('');\n  const [collapseEDiv, setCollapseEDiv] = useState('');\n  const [headerBidding, setHeaderBidding] = useState('');\n  const [lazyLoad, setLazyLoad] = useState('');\n  const [ignore, setIgnore] = useState('');\n  const [size, setSize] = useState('');\n  const [sizeMapping, setSizeMapping] = useState('');\n  const [targeting, setTargeting] = useState('');\n  const [slots, setSlots] = useState([]);\n  const sspNames = [];\n\n  for (let [key, value] of Object.entries(bidder)) {\n    sspNames.push(value);\n  }\n\n  const addToSlots = () => {\n    const _slots = slots;\n    const unit = {};\n\n    if (unitName) {\n      unit.unit = unitName;\n    }\n\n    if (inExpand) {\n      unit.initiallyExpanded = inExpand;\n    }\n\n    if (priorityLoad) {\n      unit.priorityLoad = priorityLoad;\n    }\n\n    if (collapseEDiv) {\n      unit.collapseEmptyDiv = collapseEDiv;\n    }\n\n    if (headerBidding) {\n      unit.headerBidding = headerBidding;\n    }\n\n    if (lazyLoad) {\n      unit.lazyLoad = lazyLoad;\n    }\n\n    if (ignore) {\n      unit.ignore = ignore;\n    }\n\n    if (size) {\n      unit.size = size;\n    }\n\n    if (sizeMapping) {\n      unit.sizeMapping = sizeMapping;\n    }\n\n    if (targeting) {\n      unit.targeting = targeting;\n    }\n\n    if (Object.keys(unit).length > 0) {\n      _slots.push(unit);\n\n      setOutput(\"slots: \" + _slots.slots);\n    }\n  };\n\n  const inputFromValue = (configString, slotString, pageName) => {\n    var _config, _slots;\n\n    var _latePageN = false; // if (typeof configString === \"string\") {\n    //     _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n    //     _config = _config.replace(/'/g, '\"');\n    //     try {\n    //         _config = JSON.parse(_config);\n    //     } catch (ex) {\n    //         alert('Config is not valid JSON \\nPlease check the console for more detail');\n    //         console.error(ex);\n    //     }\n    // }\n    // if (typeof slotString === \"string\") {\n    //     _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n    //     _slots = _slots.replace(/'/g, '\"');\n    //     try {\n    //         _slots = JSON.parse(_slots);\n    //     } catch (ex) {\n    //         alert('Slots are not valid JSON \\nPlease check the console for more detail');\n    //         console.error(ex);\n    //     }\n    // }\n    // if (typeof _slots === \"string\")\n    //     _slots = null;\n    // if (typeof _config === \"string\")\n    //     _config = null;\n    // if (pageName.length < 1) {\n    //     try {\n    //         _latePageN = true;\n    //         pageName = window.prompt('Please insert page name');\n    //     } catch (ex) {\n    //         console.error(ex);\n    //     }\n    // }\n\n    return {\n      configData: {\n        config: _config ? _config : [],\n        slots: _slots ? _slots : [],\n        pageName\n      },\n      latePageN: _latePageN\n    };\n  };\n\n  const setClipboard = outText => {\n    navigator.clipboard.writeText(outText).then(function () {\n      console.log(\"Copied to clipboard successfully!\");\n    }, function () {\n      console.error(\"Unable to write to clipboard.\");\n    });\n  };\n\n  const setData = () => {\n    if (isForConfigGeneration) {\n      navigate('config', {\n        state: {\n          slots: slots\n        }\n      });\n    } else {\n      setOutput(\"slots: \" + slots);\n    }\n\n    if (isClipBChecked) {\n      setClipboard(\"slots: \" + slots);\n    }\n  };\n\n  const generateOrAdd = event => {\n    const {\n      configData,\n      latePageN\n    } = inputFromValue(inConfig, inSlots, inPageName); // const outText = configGeneration(configData, inSsp, isRopChecked);\n\n    console.log('in generate: ', slots); // console.log('in generate: ', JSON.parse(st));\n\n    switch (event.target.id) {\n      case 'button1':\n        addToSlots();\n        break;\n\n      case 'button2':\n        setData();\n        break;\n    } // setOutput(outText);\n    // if (isClipBChecked) {\n    //     if (latePageN) {\n    //         // after windows function prompt it takes a while for using the windows navigator!\n    //         setTimeout(() => { setClipboard(outText); }, 180)\n    //     } else {\n    //         setClipboard(outText);\n    //     }\n    // }\n\n  };\n\n  return React.createElement(SimpleFlexWrapper, {\n    top: \"50px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, React.createElement(WrapAreas, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(ConfigWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, React.createElement(ConfigSetting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    name: \"Use data for config generation\",\n    addSpaceH: \"4px\",\n    checked: isForConfigGeneration,\n    onChange: () => setIsForConfigGeneration(!isForConfigGeneration),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }), React.createElement(Distance, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }), \"    \", React.createElement(Slider, {\n    name: \"Save to clipboard\",\n    addSpaceH: \"4px\",\n    checked: isClipBChecked,\n    onChange: () => setIsClipBChecked(!isClipBChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }))), React.createElement(UnitName, {\n    marginLR: \"0\",\n    register: register,\n    onChange: e => setUnitName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }), React.createElement(\"warning\", {\n    display: warUnitName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    width: \"100%\",\n    placeholder: \"Initially expanded\",\n    onChange: e => setInExpand(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Priority load\",\n    onChange: e => setPriorityLoad(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Collapse empty div\",\n    onChange: e => setCollapseEDiv(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Header bidding\",\n    onChange: e => setHeaderBidding(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Lazy load\",\n    onChange: e => setLazyLoad(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Ignore\",\n    onChange: e => setIgnore(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }), React.createElement(DistanceInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Size\",\n    height: \"15%\",\n    onChange: e => setSize(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }), React.createElement(\"warning\", {\n    display: warSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Size Mapping\",\n    onChange: e => setSizeMapping(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Targeting\",\n    onChange: e => setTargeting(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }), React.createElement(OutputField, {\n    style: {\n      color: output === \"Output\" ? \" grey\" : null\n    },\n    dangerouslySetInnerHTML: {\n      __html: output\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }), React.createElement(ButtonArea, {\n    name1: \"Add Unit\",\n    name2: \"Generate\",\n    color1: \"#ffc107\",\n    onClick: generateOrAdd,\n    top: \"14px\",\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  })));\n};\n\nexport { SlotsGeneration };","map":{"version":3,"sources":["/Users/hagen.handtke/Documents/urban_integration/src/components/SlotsGeneration.js"],"names":["React","useState","styled","useForm","InputArea","OutputArea","Slider","fontSetting","InputText","ColumnFlexWrapper","SimpleFlexWrapper","WrapAreas","Dropdown","configGeneration","bidder","StandardInput","navigate","ButtonElement","InputField","props","height","UnitNameWrapper","div","ButtonArea","justify","top","marginBottom","color1","name1","color2","name2","UnitName","register","required","marginLR","width","InputPageName","DistanceInput","OutputField","ConfigSetting","ConfigWrapper","Distance","Warning","SlotsGeneration","onSubmit","data","console","log","handleSubmit","watch","errors","output","setOutput","inConfig","setInConfig","inSlots","setInSlots","isClipBChecked","setIsClipBChecked","isForConfigGeneration","setIsForConfigGeneration","warUnitName","setwarUnitName","warSize","setwarSize","inPageName","setInPageName","unitName","setUnitName","inExpand","setInExpand","priorityLoad","setPriorityLoad","collapseEDiv","setCollapseEDiv","headerBidding","setHeaderBidding","lazyLoad","setLazyLoad","ignore","setIgnore","size","setSize","sizeMapping","setSizeMapping","targeting","setTargeting","slots","setSlots","sspNames","key","value","Object","entries","push","addToSlots","_slots","unit","initiallyExpanded","collapseEmptyDiv","keys","length","inputFromValue","configString","slotString","pageName","_config","_latePageN","configData","config","latePageN","setClipboard","outText","navigator","clipboard","writeText","then","error","setData","state","generateOrAdd","event","target","id","e","color","__html"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useForm } from \"react-hook-form\";\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\n// import { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { InputText } from '../styles/InputOutputFields';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/Wrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown';\n// import { configGenration } from '../services/ConfigGeneration'\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helpers';\nimport { StandardInput } from '../styles/molecules/StandardInput';\nimport { navigate } from \"@reach/router\"\n\nimport { ButtonElement } from '../styles/Buttons';\nconst InputField = styled(InputArea)`\n    flex: 0 0 ${props => props.height ? props.height : '30%'};\n    margin-top: 14px;\n    outline: none;\n    // @media(max-width: 1363px) {\n    //     flex: 0 0 48%;\n    // }\n    // @media(max-width: 550px) {\n    //     flex: 0 0 46%;\n    // }\n`;\n\nconst UnitNameWrapper = styled.div`\n    margin: 20px 0  50px 0;\n`;\n\nconst ButtonArea = (props) => (\n    <SimpleFlexWrapper justify={props.justify} top={props.top} style={{ marginBottom: '50px' }} >\n        <ButtonElement id='button1' bColor={props.color1} {...props} >{props.name1}</ButtonElement>\n        <ButtonElement id='button2' bColor={props.color2} marginL='15px' {...props} >{props.name2}</ButtonElement>\n    </SimpleFlexWrapper>\n);\n\nconst UnitName = (props) => (\n    <UnitNameWrapper>\n        <InputText name=\"exampleRequired\" ref={props.register({ required: true })} marginLR={props.marginLR} style={{ width: '100%' }} placeholder=\"Unit name\" />\n    </UnitNameWrapper>\n);\n\nconst InputPageName = styled(InputField)`\n    flex: 0 0 150px;\n    height: 24px;\n    resize: none;\n    border: none;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    margin: 0;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    @media(max-width: 1401px) {\n        flex: 0 0 10%;\n    }\n`;\n\nconst DistanceInput = styled.div`\n    margin-top: 14px;\n`;\n\n\nconst OutputField = styled(OutputArea)`\n    flex: 0 0 30vh;\n    margin-top: 14px;\n    padding: 2px 0 0 2px;\n\n`;\n\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1624px) {\n        max-width: 70%;\n\n    }\n    @media(max-width: 1160px) {\n        flex-flow: column;\n        // min-width: 229px\n        max-width: 40px;\n    }\n`;\n\nconst ConfigWrapper = styled.div`\n    margin: 50px 0 0 0;\n`;\n\nconst Distance = styled.div`\n    width: 15px;\n`;\n\nconst Warning = styled.div`\n    font-weight: 500;\n    ${fontSetting};\n    display: {props => props.display? props.display : false };\n    color: #c82333;\n`;\n\nconst SlotsGeneration = () => {\n    const onSubmit = data => console.log('SlotsGeneration: ', data);\n    const { register, handleSubmit, watch, errors } = useForm();\n    // Declare a new state variable, which we'll call \"count\"\n    const [output, setOutput] = useState(\"Output\");\n    const [inConfig, setInConfig] = useState([]);\n    const [inSlots, setInSlots] = useState([]);\n    const [isClipBChecked, setIsClipBChecked] = useState(true);\n    const [isForConfigGeneration, setIsForConfigGeneration] = useState(true);\n    const [warUnitName, setwarUnitName] = useState(false);\n    const [warSize, setwarSize] = useState(false);\n    const [inPageName, setInPageName] = useState('');\n\n    const [unitName, setUnitName] = useState('');\n    const [inExpand, setInExpand] = useState('');\n    const [priorityLoad, setPriorityLoad] = useState('');\n    const [collapseEDiv, setCollapseEDiv] = useState('');\n    const [headerBidding, setHeaderBidding] = useState('');\n    const [lazyLoad, setLazyLoad] = useState('');\n    const [ignore, setIgnore] = useState('');\n    const [size, setSize] = useState('');\n    const [sizeMapping, setSizeMapping] = useState('');\n    const [targeting, setTargeting] = useState('');\n    const [slots, setSlots] = useState([]);\n\n    const sspNames = [];\n    for (let [key, value] of Object.entries(bidder)) {\n        sspNames.push(value);\n    }\n\n    const addToSlots = () => {\n        const _slots = slots;\n        const unit = {};\n        if (unitName) {\n            unit.unit = unitName;\n        } if (inExpand) {\n            unit.initiallyExpanded = inExpand;\n        } if (priorityLoad) {\n            unit.priorityLoad = priorityLoad;\n        } if (collapseEDiv) {\n            unit.collapseEmptyDiv = collapseEDiv;\n        } if (headerBidding) {\n            unit.headerBidding = headerBidding;\n        } if (lazyLoad) {\n            unit.lazyLoad = lazyLoad;\n        } if (ignore) {\n            unit.ignore = ignore;\n        } if (size) {\n            unit.size = size;\n        }\n        if (sizeMapping) {\n            unit.sizeMapping = sizeMapping;\n        }\n        if (targeting) {\n            unit.targeting = targeting;\n        }\n        if (Object.keys(unit).length > 0) {\n            _slots.push(unit)\n            setOutput(\"slots: \" + _slots.slots);\n        }\n    }\n\n\n    const inputFromValue = (configString, slotString, pageName) => {\n        var _config, _slots;\n        var _latePageN = false;\n        // if (typeof configString === \"string\") {\n        //     _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n        //     _config = _config.replace(/'/g, '\"');\n        //     try {\n        //         _config = JSON.parse(_config);\n        //     } catch (ex) {\n        //         alert('Config is not valid JSON \\nPlease check the console for more detail');\n        //         console.error(ex);\n        //     }\n        // }\n        // if (typeof slotString === \"string\") {\n        //     _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n        //     _slots = _slots.replace(/'/g, '\"');\n        //     try {\n        //         _slots = JSON.parse(_slots);\n        //     } catch (ex) {\n        //         alert('Slots are not valid JSON \\nPlease check the console for more detail');\n        //         console.error(ex);\n        //     }\n        // }\n        // if (typeof _slots === \"string\")\n        //     _slots = null;\n        // if (typeof _config === \"string\")\n        //     _config = null;\n        // if (pageName.length < 1) {\n        //     try {\n        //         _latePageN = true;\n        //         pageName = window.prompt('Please insert page name');\n        //     } catch (ex) {\n        //         console.error(ex);\n        //     }\n        // }\n\n        return { configData: { config: _config ? _config : [], slots: _slots ? _slots : [], pageName }, latePageN: _latePageN };\n\n    }\n    const setClipboard = (outText) => {\n        navigator.clipboard.writeText(outText).then(function () {\n            console.log(\"Copied to clipboard successfully!\");\n        }, function () {\n            console.error(\"Unable to write to clipboard.\");\n        });\n    }\n\n    const setData = () => {\n        if (isForConfigGeneration) {\n            navigate('config', { state: { slots: slots } });\n        } else {\n            setOutput(\"slots: \" + slots);\n        }\n        if (isClipBChecked) {\n            setClipboard(\"slots: \" + slots);\n        }\n    }\n\n    const generateOrAdd = (event) => {\n        const { configData, latePageN } = inputFromValue(inConfig, inSlots, inPageName);\n        // const outText = configGeneration(configData, inSsp, isRopChecked);\n\n        console.log('in generate: ', slots);\n        // console.log('in generate: ', JSON.parse(st));\n        switch (event.target.id) {\n            case 'button1':\n                addToSlots();\n                break;\n            case 'button2':\n                setData();\n                break;\n        }\n\n\n        // setOutput(outText);\n        // if (isClipBChecked) {\n        //     if (latePageN) {\n        //         // after windows function prompt it takes a while for using the windows navigator!\n        //         setTimeout(() => { setClipboard(outText); }, 180)\n        //     } else {\n        //         setClipboard(outText);\n        //     }\n        // }\n    }\n\n    return (\n        <SimpleFlexWrapper top=\"50px\" >\n            <WrapAreas>\n\n                <ConfigWrapper>\n                    <ConfigSetting>\n                        <Slider name={\"Use data for config generation\"} addSpaceH='4px' checked={isForConfigGeneration} onChange={() => setIsForConfigGeneration(!isForConfigGeneration)} />\n                        <Distance />    <Slider name={\"Save to clipboard\"} addSpaceH='4px' checked={isClipBChecked} onChange={() => setIsClipBChecked(!isClipBChecked)} />\n                    </ConfigSetting>\n                </ConfigWrapper>\n                <UnitName marginLR='0' register={register} onChange={(e) => setUnitName(e.target.value)} />\n                <warning display={warUnitName} >{}</warning>\n                <StandardInput marginLR='0' width='100%' placeholder=\"Initially expanded\" onChange={(e) => setInExpand(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Priority load\" onChange={(e) => setPriorityLoad(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Collapse empty div\" onChange={(e) => setCollapseEDiv(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Header bidding\" onChange={(e) => setHeaderBidding(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Lazy load\" onChange={(e) => setLazyLoad(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Ignore\" onChange={(e) => setIgnore(e.target.value)} />\n                < DistanceInput />\n                <InputField placeholder=\"Size\" height=\"15%\" onChange={(e) => setSize(e.target.value)} />\n                <warning display={warSize} >{}</warning>\n                <InputField placeholder=\"Size Mapping\" onChange={(e) => setSizeMapping(e.target.value)} />\n                <InputField placeholder=\"Targeting\" onChange={(e) => setTargeting(e.target.value)} />\n                <OutputField style={{ color: (output === \"Output\") ? \" grey\" : null }} dangerouslySetInnerHTML={{ __html: output }}></OutputField>\n                <ButtonArea name1={\"Add Unit\"} name2={\"Generate\"} color1='#ffc107' onClick={generateOrAdd} top=\"14px\" justify=\"flex-end\" />\n            </WrapAreas>\n        </SimpleFlexWrapper >\n    );\n}\n\nexport { SlotsGeneration };\n"]},"metadata":{},"sourceType":"module"}