{"ast":null,"code":"var _jsxFileName = \"/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\nimport { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/Wrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown';\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helpers';\nconst InputField = styled(InputArea)`\n    flex: 0 0 49%;\n    height: 30vh;\n    margin-bottom: 28px;\n    margin-top: ${props => props.marginT ? props.marginT : '14px'};\n    outline: none;\n    @media(max-width: 1363px) {\n        flex: 0 0 48%;\n    }\n    @media(max-width: 550) {\n        flex: 0 0 46%;\n    }\n`;\nconst ConfigDropdown = styled(Dropdown)`\n`;\nconst InputPageName = styled(InputField)`\n    height: 24px;\n    resize: none;\n    border: none;\n    margin-top: 0;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    // @media(max-width: 1402px) {\n    //     margin-bottom: 10px;\n    // }\n`;\nconst PageNameWrapper = styled.div`\n    margin: 20px 0  50px 0;\n`;\nconst DistanceInput = styled.div`\n    width: 1%;\n`;\nconst OutputField = styled(OutputArea)`\n    height: 30vh;\n    padding: 2px 0 0 2px;\n`;\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 90%;\n    @media(max-width: 1439px) {\n            flex-flow: column;\n            min-width: 229px\n    }\n`;\nconst Distance = styled.div`\n    height: 100vh;\n`;\n\nconst ConfigGeneration = props => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [output, setOutput] = useState(\"Output\");\n  const [inConfig, setInConfig] = useState([]);\n  const [inSlots, setInSlots] = useState([]);\n  const [isClipBChecked, setIsClipBChecked] = useState(true);\n  const [isRopChecked, setIsRopChecked] = useState(true);\n  const [isCsvGChecked, setIsCsvGChecked] = useState(true);\n  const [inSsp, setSsp] = useState('criteo');\n  const [inPageName, setInPageName] = useState('');\n  const sspNames = [];\n\n  for (let [key, value] of Object.entries(bidder)) {\n    sspNames.push(value);\n  }\n\n  useEffect(() => {\n    if (props.location.state.slots) setInSlots(JSON.stringify(props.location.state.slots));\n  }, []);\n\n  const inputFromValue = (configString, slotString, pageName) => {\n    var _config, _slots;\n\n    var _latePageN = false;\n\n    if (typeof configString === \"string\") {\n      _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n      _config = _config.replace(/'/g, '\"');\n\n      try {\n        _config = JSON.parse(_config);\n      } catch (ex) {\n        alert('Config is not valid JSON \\nPlease check the console for more detail');\n        console.error(ex);\n      }\n    }\n\n    if (typeof slotString === \"string\") {\n      _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n      _slots = _slots.replace(/'/g, '\"');\n\n      try {\n        _slots = JSON.parse(_slots);\n      } catch (ex) {\n        alert('Slots are not valid JSON \\nPlease check the console for more detail');\n        console.error(ex);\n      }\n    }\n\n    if (typeof _slots === \"string\") _slots = null;\n    if (typeof _config === \"string\") _config = null;\n\n    if (pageName.length < 1) {\n      try {\n        _latePageN = true;\n        pageName = window.prompt('Please insert page name');\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n\n    return {\n      configData: {\n        config: _config ? _config : [],\n        slots: _slots ? _slots : [],\n        pageName\n      },\n      latePageN: _latePageN\n    };\n  };\n\n  const setClipboard = outText => {\n    navigator.clipboard.writeText(outText).then(function () {\n      console.log(\"Copied to clipboard successfully!\");\n    }, function () {\n      console.error(\"Unable to write to clipboard.\");\n    });\n  };\n\n  const generate = () => {\n    const {\n      configData,\n      latePageN\n    } = inputFromValue(inConfig, inSlots, inPageName);\n    const outText = configGeneration(configData, inSsp, isRopChecked);\n    setOutput(outText);\n\n    if (isClipBChecked) {\n      if (latePageN) {\n        // after windows function prompt it takes a while for using the windows navigator!\n        setTimeout(() => {\n          setClipboard(outText);\n        }, 180);\n      } else {\n        setClipboard(outText);\n      }\n    }\n  };\n\n  return React.createElement(SimpleFlexWrapper, {\n    top: \"50px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(WrapAreas, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    name: \"ROP\",\n    addSpaceL: \"114px\",\n    addSpaceH: \"4px\",\n    checked: isCsvGChecked,\n    onChange: () => setIsCsvGeneration(!setIsCsvGChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), React.createElement(ConfigSetting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    name: \"ROP\",\n    addSpaceL: \"114px\",\n    addSpaceH: \"4px\",\n    checked: isRopChecked,\n    onChange: () => setIsRopChecked(!isRopChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), React.createElement(Slider, {\n    name: \"Save to clipboard\",\n    addSpaceH: \"4px\",\n    checked: isClipBChecked,\n    onChange: () => setIsClipBChecked(!isClipBChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(ConfigDropdown, {\n    name: \"Choose SSP\",\n    sspNames: sspNames,\n    onChange: e => setSsp(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(InputPageName, {\n    placeholder: \"Page name\",\n    onChange: e => setInPageName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }))), React.createElement(SimpleFlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(InputField, {\n    placeholder: \"Input Config: openX\",\n    marginT: \"-10px\",\n    onChange: e => setInConfig(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), React.createElement(DistanceInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Input Slots config:\",\n    marginT: \"-10px\",\n    value: inSlots,\n    onChange: e => setInSlots(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  })), React.createElement(OutputField, {\n    style: {\n      color: output === \"Output\" ? \" grey\" : null\n    },\n    dangerouslySetInnerHTML: {\n      __html: output\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Generate\",\n    onClick: generate,\n    top: \"14px\",\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  })));\n};\n\nexport { ConfigGeneration };","map":{"version":3,"sources":["/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js"],"names":["React","useState","useEffect","styled","InputArea","OutputArea","Button","Slider","fontSetting","ColumnFlexWrapper","SimpleFlexWrapper","WrapAreas","Dropdown","configGeneration","bidder","InputField","props","marginT","ConfigDropdown","InputPageName","PageNameWrapper","div","DistanceInput","OutputField","ConfigSetting","Distance","ConfigGeneration","output","setOutput","inConfig","setInConfig","inSlots","setInSlots","isClipBChecked","setIsClipBChecked","isRopChecked","setIsRopChecked","isCsvGChecked","setIsCsvGChecked","inSsp","setSsp","inPageName","setInPageName","sspNames","key","value","Object","entries","push","location","state","slots","JSON","stringify","inputFromValue","configString","slotString","pageName","_config","_slots","_latePageN","replace","parse","ex","alert","console","error","length","window","prompt","configData","config","latePageN","setClipboard","outText","navigator","clipboard","writeText","then","log","generate","setTimeout","setIsCsvGeneration","e","target","color","__html"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\nimport { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/Wrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown';\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helpers';\n\n\nconst InputField = styled(InputArea)`\n    flex: 0 0 49%;\n    height: 30vh;\n    margin-bottom: 28px;\n    margin-top: ${props => props.marginT ? props.marginT : '14px'};\n    outline: none;\n    @media(max-width: 1363px) {\n        flex: 0 0 48%;\n    }\n    @media(max-width: 550) {\n        flex: 0 0 46%;\n    }\n`;\n\nconst ConfigDropdown = styled(Dropdown)`\n`;\n\nconst InputPageName = styled(InputField)`\n    height: 24px;\n    resize: none;\n    border: none;\n    margin-top: 0;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    // @media(max-width: 1402px) {\n    //     margin-bottom: 10px;\n    // }\n`;\n\nconst PageNameWrapper = styled.div`\n    margin: 20px 0  50px 0;\n`;\n\nconst DistanceInput = styled.div`\n    width: 1%;\n`;\n\nconst OutputField = styled(OutputArea)`\n    height: 30vh;\n    padding: 2px 0 0 2px;\n`;\n\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 90%;\n    @media(max-width: 1439px) {\n            flex-flow: column;\n            min-width: 229px\n    }\n`;\n\nconst Distance = styled.div`\n    height: 100vh;\n`;\n\nconst ConfigGeneration = (props) => {\n    // Declare a new state variable, which we'll call \"count\"\n    const [output, setOutput] = useState(\"Output\");\n    const [inConfig, setInConfig] = useState([]);\n    const [inSlots, setInSlots] = useState([]);\n    const [isClipBChecked, setIsClipBChecked] = useState(true);\n    const [isRopChecked, setIsRopChecked] = useState(true);\n    const [isCsvGChecked, setIsCsvGChecked] = useState(true);\n    const [inSsp, setSsp] = useState('criteo');\n    const [inPageName, setInPageName] = useState('');\n\n    const sspNames = [];\n    for (let [key, value] of Object.entries(bidder)) {\n        sspNames.push(value);\n    }\n\n    useEffect(() => {\n        if (props.location.state.slots)\n            setInSlots(JSON.stringify(props.location.state.slots));\n    }, []);\n\n    const inputFromValue = (configString, slotString, pageName) => {\n        var _config, _slots;\n        var _latePageN = false;\n        if (typeof configString === \"string\") {\n            _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n            _config = _config.replace(/'/g, '\"');\n            try {\n                _config = JSON.parse(_config);\n            } catch (ex) {\n                alert('Config is not valid JSON \\nPlease check the console for more detail');\n                console.error(ex);\n            }\n        }\n        if (typeof slotString === \"string\") {\n            _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n            _slots = _slots.replace(/'/g, '\"');\n            try {\n                _slots = JSON.parse(_slots);\n            } catch (ex) {\n                alert('Slots are not valid JSON \\nPlease check the console for more detail');\n                console.error(ex);\n            }\n        }\n        if (typeof _slots === \"string\")\n            _slots = null;\n        if (typeof _config === \"string\")\n            _config = null;\n        if (pageName.length < 1) {\n            try {\n                _latePageN = true;\n                pageName = window.prompt('Please insert page name');\n            } catch (ex) {\n                console.error(ex);\n            }\n        }\n\n        return { configData: { config: _config ? _config : [], slots: _slots ? _slots : [], pageName }, latePageN: _latePageN };\n\n    }\n    const setClipboard = (outText) => {\n        navigator.clipboard.writeText(outText).then(function () {\n            console.log(\"Copied to clipboard successfully!\");\n        }, function () {\n            console.error(\"Unable to write to clipboard.\");\n        });\n    }\n\n    const generate = () => {\n        const { configData, latePageN } = inputFromValue(inConfig, inSlots, inPageName);\n        const outText = configGeneration(configData, inSsp, isRopChecked);\n        setOutput(outText);\n        if (isClipBChecked) {\n            if (latePageN) {\n                // after windows function prompt it takes a while for using the windows navigator!\n                setTimeout(() => { setClipboard(outText); }, 180)\n            } else {\n                setClipboard(outText);\n            }\n        }\n    }\n    return (\n        <SimpleFlexWrapper top=\"50px\">\n            <WrapAreas>\n                <Slider name=\"ROP\" addSpaceL=\"114px\" addSpaceH='4px' checked={isCsvGChecked} onChange={() => setIsCsvGeneration(!setIsCsvGChecked)} />\n                <ConfigSetting>\n                    <Slider name=\"ROP\" addSpaceL=\"114px\" addSpaceH='4px' checked={isRopChecked} onChange={() => setIsRopChecked(!isRopChecked)} />\n                    <Slider name=\"Save to clipboard\" addSpaceH='4px' checked={isClipBChecked} onChange={() => setIsClipBChecked(!isClipBChecked)} />\n                    <ConfigDropdown name=\"Choose SSP\" sspNames={sspNames} onChange={(e) => setSsp(e.target.value)} />\n                    <div>\n                        <InputPageName placeholder=\"Page name\" onChange={(e) => setInPageName(e.target.value)} />\n                    </div>\n                </ConfigSetting>\n                <SimpleFlexWrapper>\n                    <InputField placeholder=\"Input Config: openX\" marginT='-10px' onChange={(e) => setInConfig(e.target.value)} />\n                    < DistanceInput />\n                    <InputField placeholder=\"Input Slots config:\" marginT='-10px' value={inSlots} onChange={(e) => setInSlots(e.target.value)} />\n                </SimpleFlexWrapper>\n                <OutputField style={{ color: (output === \"Output\") ? \" grey\" : null }} dangerouslySetInnerHTML={{ __html: output }}></OutputField>\n                <Button name={\"Generate\"} onClick={generate} top=\"14px\" justify=\"flex-end\" />\n            </WrapAreas>\n        </SimpleFlexWrapper>\n    );\n}\n\nexport { ConfigGeneration };\n"]},"metadata":{},"sourceType":"module"}