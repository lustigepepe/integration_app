{"ast":null,"code":"var _jsxFileName = \"/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\nimport { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/FlexWrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown'; // import { configGenration } from '../services/ConfigGeneration'\n\nimport { configGenration } from '../services/CGenrationService';\nconst InputField = styled(InputArea)`\n\n    height: 30vh;\n    margin-bottom: 30px;\n    margin-top: 10px;\n`;\nconst OutputField = styled(OutputArea)`\n\n    height: 30vh;\n`;\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1439px) {\n            max-width: 70%;\n    }\n    @media(max-width: 1400px) {\n            flex-flow: column;\n            min-width: 229px\n    }\n`;\n\nconst ConfigGeneration = () => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [output, setOutput] = useState(\"Output\");\n  const [isClipBChecked, setIsClipBChecked] = useState(true);\n  const [isRopChecked, setIsRopChecked] = useState(true);\n  const sspNames = ['criteo', 'yieldlab'];\n\n  const configResult = () => {// setOutput();\n  };\n\n  const generate = () => {\n    console.log('bum dingsing');\n  };\n\n  return React.createElement(SimpleFlexWrapper, {\n    top: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(WrapAreas, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(ConfigSetting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    name: \"ROP\",\n    changeDesign: true,\n    checked: isRopChecked,\n    onChange: () => setIsRopChecked(!isRopChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(Slider, {\n    name: \"Save to clipboard\",\n    checked: isClipBChecked,\n    onChange: () => setIsClipBChecked(!isClipBChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(Dropdown, {\n    name: \"Choose SSP\",\n    sspNames: sspNames,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), React.createElement(InputField, {\n    placeholder: \"Input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(OutputField, {\n    style: {\n      color: output === \"Output\" ? \" grey\" : null\n    },\n    dangerouslySetInnerHTML: {\n      __html: output\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Generate\",\n    onClick: generate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })));\n};\n\nexport { ConfigGeneration };","map":{"version":3,"sources":["/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js"],"names":["React","useState","useEffect","styled","InputArea","OutputArea","Button","Slider","ColumnFlexWrapper","SimpleFlexWrapper","WrapAreas","Dropdown","configGenration","InputField","OutputField","ConfigSetting","ConfigGeneration","output","setOutput","isClipBChecked","setIsClipBChecked","isRopChecked","setIsRopChecked","sspNames","configResult","generate","console","log","color","__html"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,6BAAtC;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,SAA/C,QAAgE,uBAAhE;AACA,SAASC,QAAT,QAAyB,8BAAzB,C,CACA;;AACA,SAASC,eAAT,QAAgC,+BAAhC;AAGA,MAAMC,UAAU,GAAGV,MAAM,CAACC,SAAD,CAAY;;;;;CAArC;AAOA,MAAMU,WAAW,GAAGX,MAAM,CAACE,UAAD,CAAa;;;CAAvC;AAKA,MAAMU,aAAa,GAAGZ,MAAM,CAACM,iBAAD,CAAoB;;;;;;;;;;;CAAhD;;AAaA,MAAMO,gBAAgB,GAAG,MAAM;AAC3B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,QAAD,CAApC;AACA,QAAM,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,IAAD,CAAhD;AAEA,QAAMsB,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAjB;;AACA,QAAMC,YAAY,GAAG,MAAM,CACvB;AACH,GAFD;;AAIA,QAAMC,QAAQ,GAAG,MAAM;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEH,GAHD;;AAKA,SACI,oBAAC,iBAAD;AAAmB,IAAA,GAAG,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,KAAd;AAAqB,IAAA,YAAY,EAAE,IAAnC;AAAyC,IAAA,OAAO,EAAEN,YAAlD;AAAgE,IAAA,QAAQ,EAAE,MAAMC,eAAe,CAAC,CAACD,YAAF,CAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,mBAAd;AAAmC,IAAA,OAAO,EAAEF,cAA5C;AAA4D,IAAA,QAAQ,EAAE,MAAMC,iBAAiB,CAAC,CAACD,cAAF,CAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAE,YAAhB;AAA8B,IAAA,QAAQ,EAAEI,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ,EAMI,oBAAC,UAAD;AAAY,IAAA,WAAW,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAOI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE;AAAEK,MAAAA,KAAK,EAAGX,MAAM,KAAK,QAAZ,GAAwB,OAAxB,GAAkC;AAA3C,KAApB;AAAuE,IAAA,uBAAuB,EAAE;AAAEY,MAAAA,MAAM,EAAEZ;AAAV,KAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,UAAd;AAA0B,IAAA,OAAO,EAAEQ,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADJ,CADJ;AAcH,CA9BD;;AAgCA,SAAST,gBAAT","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields'\nimport { Button } from '../styles/Buttons'\nimport { Slider } from '../styles/molecules/Slider'\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/FlexWrapper'\nimport { Dropdown } from '../styles/molecules/Dropdown';\n// import { configGenration } from '../services/ConfigGeneration'\nimport { configGenration } from '../services/CGenrationService'\n\n\nconst InputField = styled(InputArea)`\n\n    height: 30vh;\n    margin-bottom: 30px;\n    margin-top: 10px;\n`;\n\nconst OutputField = styled(OutputArea)`\n\n    height: 30vh;\n`;\n\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1439px) {\n            max-width: 70%;\n    }\n    @media(max-width: 1400px) {\n            flex-flow: column;\n            min-width: 229px\n    }\n`;\n\nconst ConfigGeneration = () => {\n    // Declare a new state variable, which we'll call \"count\"\n    const [output, setOutput] = useState(\"Output\");\n    const [isClipBChecked, setIsClipBChecked] = useState(true);\n    const [isRopChecked, setIsRopChecked] = useState(true);\n\n    const sspNames = ['criteo', 'yieldlab'];\n    const configResult = () => {\n        // setOutput();\n    }\n\n    const generate = () => {\n        console.log('bum dingsing');\n\n    }\n\n    return (\n        <SimpleFlexWrapper top=\"30px\">\n            <WrapAreas>\n                <ConfigSetting>\n                    <Slider name={\"ROP\"} changeDesign={true} checked={isRopChecked} onChange={() => setIsRopChecked(!isRopChecked)} />\n                    <Slider name={\"Save to clipboard\"} checked={isClipBChecked} onChange={() => setIsClipBChecked(!isClipBChecked)} />\n                    <Dropdown name={\"Choose SSP\"} sspNames={sspNames} />\n                </ConfigSetting>\n                <InputField placeholder=\"Input\" />\n                <OutputField style={{ color: (output === \"Output\") ? \" grey\" : null }} dangerouslySetInnerHTML={{ __html: output }}></OutputField>\n                <Button name={\"Generate\"} onClick={generate} />\n            </WrapAreas>\n        </SimpleFlexWrapper>\n    );\n}\n\nexport { ConfigGeneration };\n"]},"metadata":{},"sourceType":"module"}