{"ast":null,"code":"var _jsxFileName = \"/Users/hagen.handtke/Documents/urban_integration/src/components/SlotsGeneration.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields'; // import { Button } from '../styles/Buttons';\n\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { InputText } from '../styles/InputOutputFields';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/Wrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown'; // import { configGenration } from '../services/ConfigGeneration'\n\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helpers';\nimport { StandardInput } from '../styles/molecules/StandardInput';\nimport { navigate } from \"@reach/router\";\nimport { ButtonElement } from '../styles/Buttons';\nimport { relative } from 'upath';\nconst InputField = styled(InputArea)`\n    flex: 0 0 ${props => props.height ? props.height : '30%'};\n    margin-top: 14px;\n    outline: none;\n    // @media(max-width: 1363px) {\n    //     flex: 0 0 48%;\n    // }\n    // @media(max-width: 550px) {\n    //     flex: 0 0 46%;\n    // }\n`;\nconst UnitNameWrapper = styled.div`\n    margin: 20px 0  50px 0;\n`;\n\nconst ButtonArea = props => React.createElement(SimpleFlexWrapper, {\n  justify: props.justify,\n  top: props.top,\n  style: {\n    marginBottom: '50px'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, React.createElement(ButtonElement, Object.assign({\n  id: \"button1\",\n  bColor: props.color1\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}), props.name1), React.createElement(ButtonElement, Object.assign({\n  id: \"button2\",\n  bColor: props.color2,\n  marginL: \"15px\"\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37\n  },\n  __self: this\n}), props.name2));\n\nconst UnitName = props => React.createElement(UnitNameWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}, React.createElement(InputText, {\n  marginLR: props.marginLR,\n  style: {\n    width: '100%'\n  },\n  placeholder: \"Unit name\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}));\n\nconst InputPageName = styled(InputField)`\n    flex: 0 0 150px;\n    height: 24px;\n    resize: none;\n    border: none;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    margin: 0;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    @media(max-width: 1401px) {\n        flex: 0 0 10%;\n    }\n`;\nconst DistanceInput = styled.div`\n    margin-top: 14px;\n`;\nconst OutputField = styled(OutputArea)`\n    flex: 0 0 30vh;\n    margin-top: 14px;\n    padding: 2px 0 0 2px;\n\n`;\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1624px) {\n        max-width: 70%;\n\n    }\n    @media(max-width: 1160px) {\n        flex-flow: column;\n        // min-width: 229px\n        max-width: 40px;\n    }\n`;\nconst ConfigWrapper = styled.div`\n    margin: 50px 0 0 0;\n`;\nconst Distance = styled.div`\n    width: 15px;\n`;\nconst Warning = styled.div`\n    position: relative;\n    margin-bottom: ${props => props.marginB ? props.marginB : '0px'};\n    &::after{\n        position: absolute;\n    }\n    top: ${props => props.top ? props.top : '0px'};\n    font-weight: 900;\n    ${fontSetting};\n    color: #c82333;\n    background-color: #e0abb0;\n    border-radius: 4px;\n    padding: 2px 0 2px 4px;\n    display: ${props => props.show ? 'block' : 'none'};\n`; // display:  none;\n\nconst SlotsGeneration = () => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [output, setOutput] = useState(\"Output\");\n  const [inConfig, setInConfig] = useState([]);\n  const [inSlots, setInSlots] = useState([]);\n  const [isClipBChecked, setIsClipBChecked] = useState(true);\n  const [isForConfigGeneration, setIsForConfigGeneration] = useState(true);\n  const [warUnitName, setWarUnitName] = useState(false);\n  const [warSize, setWarSize] = useState(false);\n  const [inPageName, setInPageName] = useState('');\n  const [unitName, setUnitName] = useState('');\n  const [inExpand, setInExpand] = useState('');\n  const [priorityLoad, setPriorityLoad] = useState('');\n  const [collapseEDiv, setCollapseEDiv] = useState('');\n  const [headerBidding, setHeaderBidding] = useState('');\n  const [lazyLoad, setLazyLoad] = useState('');\n  const [ignore, setIgnore] = useState('');\n  const [size, setSize] = useState('');\n  const [sizeMapping, setSizeMapping] = useState('');\n  const [targeting, setTargeting] = useState('');\n  const [slots, setSlots] = useState([]);\n  const sspNames = [];\n\n  for (let [key, value] of Object.entries(bidder)) {\n    sspNames.push(value);\n  }\n\n  const addToSlots = () => {\n    const _slots = slots;\n    const unit = {};\n\n    if (unitName) {\n      unit.unit = unitName;\n    }\n\n    if (inExpand) {\n      unit.initiallyExpanded = inExpand;\n    }\n\n    if (priorityLoad) {\n      unit.priorityLoad = priorityLoad;\n    }\n\n    if (collapseEDiv) {\n      unit.collapseEmptyDiv = collapseEDiv;\n    }\n\n    if (headerBidding) {\n      unit.headerBidding = headerBidding;\n    }\n\n    if (lazyLoad) {\n      unit.lazyLoad = lazyLoad;\n    }\n\n    if (ignore) {\n      unit.ignore = ignore;\n    }\n\n    if (size) {\n      unit.size = size;\n    }\n\n    if (sizeMapping) {\n      unit.sizeMapping = sizeMapping;\n    }\n\n    if (targeting) {\n      unit.targeting = targeting;\n    }\n\n    if (Object.keys(unit).length > 0) {\n      _slots.push(unit);\n\n      setOutput(\"slots: \" + _slots.slots);\n    }\n  };\n\n  const setClipboard = outText => {\n    navigator.clipboard.writeText(outText).then(function () {\n      console.log(\"Copied to clipboard successfully!\");\n    }, function () {\n      console.error(\"Unable to write to clipboard.\");\n    });\n  };\n\n  const setData = () => {\n    if (isForConfigGeneration) {\n      navigate('config', {\n        state: {\n          slots: slots\n        }\n      });\n    } else {\n      setOutput(\"slots: \" + slots);\n    }\n\n    if (isClipBChecked) {\n      setClipboard(\"slots: \" + slots);\n    }\n  };\n\n  useEffect(() => {\n    console.log('useeffect - unitname:', unitName, ' size: ', size);\n  });\n\n  const generateOrAdd = event => {\n    if (!unitName) setWarUnitName(true);\n    if (!size) setWarSize(true);\n    console.log('in generate: ', size, ' :--: ', unitName);\n    if (!size || !unitName) return; // console.log('in generate: ', JSON.parse(st));\n\n    switch (event.target.id) {\n      case 'button1':\n        addToSlots();\n        break;\n\n      case 'button2':\n        setData();\n        break;\n    }\n  };\n\n  return React.createElement(SimpleFlexWrapper, {\n    top: \"50px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(WrapAreas, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(ConfigWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, React.createElement(ConfigSetting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    name: \"Use data for config generation\",\n    addSpaceH: \"4px\",\n    checked: isForConfigGeneration,\n    onChange: () => setIsForConfigGeneration(!isForConfigGeneration),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }), React.createElement(Distance, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }), \"    \", React.createElement(Slider, {\n    name: \"Save to clipboard\",\n    addSpaceH: \"4px\",\n    checked: isClipBChecked,\n    onChange: () => setIsClipBChecked(!isClipBChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }))), React.createElement(UnitName, {\n    marginLR: \"0\",\n    onChange: e => setUnitName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }), React.createElement(Warning, {\n    show: warUnitName,\n    top: \"-40px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, \"Unit name is required\"), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    width: \"100%\",\n    placeholder: \"Initially expanded\",\n    onChange: e => setInExpand(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Priority load\",\n    onChange: e => setPriorityLoad(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Collapse empty div\",\n    onChange: e => setCollapseEDiv(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Header bidding\",\n    onChange: e => setHeaderBidding(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Lazy load\",\n    onChange: e => setLazyLoad(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Ignore\",\n    onChange: e => setIgnore(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }), React.createElement(DistanceInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Size\",\n    height: \"15%\",\n    onChange: e => setSize(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }), React.createElement(Warning, {\n    show: warSize,\n    top: \"10px\",\n    marginB: \"10px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, \"Size is required\"), React.createElement(InputField, {\n    placeholder: \"Size Mapping\",\n    onChange: e => setSizeMapping(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Targeting\",\n    onChange: e => setTargeting(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }), React.createElement(OutputField, {\n    style: {\n      color: output === \"Output\" ? \" grey\" : null\n    },\n    dangerouslySetInnerHTML: {\n      __html: output\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }), React.createElement(ButtonArea, {\n    name1: \"Add Unit\",\n    name2: \"Generate\",\n    color1: \"#ffc107\",\n    onClick: generateOrAdd,\n    top: \"14px\",\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  })));\n};\n\nexport { SlotsGeneration };","map":{"version":3,"sources":["/Users/hagen.handtke/Documents/urban_integration/src/components/SlotsGeneration.js"],"names":["React","useState","useEffect","styled","InputArea","OutputArea","Slider","fontSetting","InputText","ColumnFlexWrapper","SimpleFlexWrapper","WrapAreas","Dropdown","configGeneration","bidder","StandardInput","navigate","ButtonElement","relative","InputField","props","height","UnitNameWrapper","div","ButtonArea","justify","top","marginBottom","color1","name1","color2","name2","UnitName","marginLR","width","InputPageName","DistanceInput","OutputField","ConfigSetting","ConfigWrapper","Distance","Warning","marginB","show","SlotsGeneration","output","setOutput","inConfig","setInConfig","inSlots","setInSlots","isClipBChecked","setIsClipBChecked","isForConfigGeneration","setIsForConfigGeneration","warUnitName","setWarUnitName","warSize","setWarSize","inPageName","setInPageName","unitName","setUnitName","inExpand","setInExpand","priorityLoad","setPriorityLoad","collapseEDiv","setCollapseEDiv","headerBidding","setHeaderBidding","lazyLoad","setLazyLoad","ignore","setIgnore","size","setSize","sizeMapping","setSizeMapping","targeting","setTargeting","slots","setSlots","sspNames","key","value","Object","entries","push","addToSlots","_slots","unit","initiallyExpanded","collapseEmptyDiv","keys","length","setClipboard","outText","navigator","clipboard","writeText","then","console","log","error","setData","state","generateOrAdd","event","target","id","e","color","__html"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\n// import { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { InputText } from '../styles/InputOutputFields';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/Wrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown';\n// import { configGenration } from '../services/ConfigGeneration'\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helpers';\nimport { StandardInput } from '../styles/molecules/StandardInput';\nimport { navigate } from \"@reach/router\"\n\nimport { ButtonElement } from '../styles/Buttons';\nimport { relative } from 'upath';\nconst InputField = styled(InputArea)`\n    flex: 0 0 ${props => props.height ? props.height : '30%'};\n    margin-top: 14px;\n    outline: none;\n    // @media(max-width: 1363px) {\n    //     flex: 0 0 48%;\n    // }\n    // @media(max-width: 550px) {\n    //     flex: 0 0 46%;\n    // }\n`;\n\nconst UnitNameWrapper = styled.div`\n    margin: 20px 0  50px 0;\n`;\n\nconst ButtonArea = (props) => (\n    <SimpleFlexWrapper justify={props.justify} top={props.top} style={{ marginBottom: '50px' }} >\n        <ButtonElement id='button1' bColor={props.color1} {...props} >{props.name1}</ButtonElement>\n        <ButtonElement id='button2' bColor={props.color2} marginL='15px' {...props} >{props.name2}</ButtonElement>\n    </SimpleFlexWrapper>\n);\n\nconst UnitName = (props) => (\n    <UnitNameWrapper>\n        <InputText marginLR={props.marginLR} style={{ width: '100%' }} placeholder=\"Unit name\" />\n    </UnitNameWrapper>\n);\n\nconst InputPageName = styled(InputField)`\n    flex: 0 0 150px;\n    height: 24px;\n    resize: none;\n    border: none;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    margin: 0;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    @media(max-width: 1401px) {\n        flex: 0 0 10%;\n    }\n`;\n\nconst DistanceInput = styled.div`\n    margin-top: 14px;\n`;\n\n\nconst OutputField = styled(OutputArea)`\n    flex: 0 0 30vh;\n    margin-top: 14px;\n    padding: 2px 0 0 2px;\n\n`;\n\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1624px) {\n        max-width: 70%;\n\n    }\n    @media(max-width: 1160px) {\n        flex-flow: column;\n        // min-width: 229px\n        max-width: 40px;\n    }\n`;\n\nconst ConfigWrapper = styled.div`\n    margin: 50px 0 0 0;\n`;\n\nconst Distance = styled.div`\n    width: 15px;\n`;\n\nconst Warning = styled.div`\n    position: relative;\n    margin-bottom: ${props => props.marginB ? props.marginB : '0px'};\n    &::after{\n        position: absolute;\n    }\n    top: ${props => props.top ? props.top : '0px'};\n    font-weight: 900;\n    ${fontSetting};\n    color: #c82333;\n    background-color: #e0abb0;\n    border-radius: 4px;\n    padding: 2px 0 2px 4px;\n    display: ${props => props.show ? 'block' : 'none'};\n`;\n\n// display:  none;\nconst SlotsGeneration = () => {\n    // Declare a new state variable, which we'll call \"count\"\n    const [output, setOutput] = useState(\"Output\");\n    const [inConfig, setInConfig] = useState([]);\n    const [inSlots, setInSlots] = useState([]);\n    const [isClipBChecked, setIsClipBChecked] = useState(true);\n    const [isForConfigGeneration, setIsForConfigGeneration] = useState(true);\n    const [warUnitName, setWarUnitName] = useState(false);\n    const [warSize, setWarSize] = useState(false);\n    const [inPageName, setInPageName] = useState('');\n\n    const [unitName, setUnitName] = useState('');\n    const [inExpand, setInExpand] = useState('');\n    const [priorityLoad, setPriorityLoad] = useState('');\n    const [collapseEDiv, setCollapseEDiv] = useState('');\n    const [headerBidding, setHeaderBidding] = useState('');\n    const [lazyLoad, setLazyLoad] = useState('');\n    const [ignore, setIgnore] = useState('');\n    const [size, setSize] = useState('');\n    const [sizeMapping, setSizeMapping] = useState('');\n    const [targeting, setTargeting] = useState('');\n    const [slots, setSlots] = useState([]);\n\n    const sspNames = [];\n    for (let [key, value] of Object.entries(bidder)) {\n        sspNames.push(value);\n    }\n\n    const addToSlots = () => {\n        const _slots = slots;\n        const unit = {};\n        if (unitName) {\n            unit.unit = unitName;\n        } if (inExpand) {\n            unit.initiallyExpanded = inExpand;\n        } if (priorityLoad) {\n            unit.priorityLoad = priorityLoad;\n        } if (collapseEDiv) {\n            unit.collapseEmptyDiv = collapseEDiv;\n        } if (headerBidding) {\n            unit.headerBidding = headerBidding;\n        } if (lazyLoad) {\n            unit.lazyLoad = lazyLoad;\n        } if (ignore) {\n            unit.ignore = ignore;\n        } if (size) {\n            unit.size = size;\n        }\n        if (sizeMapping) {\n            unit.sizeMapping = sizeMapping;\n        }\n        if (targeting) {\n            unit.targeting = targeting;\n        }\n        if (Object.keys(unit).length > 0) {\n            _slots.push(unit)\n            setOutput(\"slots: \" + _slots.slots);\n        }\n    }\n\n\n    const setClipboard = (outText) => {\n        navigator.clipboard.writeText(outText).then(function () {\n            console.log(\"Copied to clipboard successfully!\");\n        }, function () {\n            console.error(\"Unable to write to clipboard.\");\n        });\n    }\n\n    const setData = () => {\n        if (isForConfigGeneration) {\n            navigate('config', { state: { slots: slots } });\n        } else {\n            setOutput(\"slots: \" + slots);\n        }\n        if (isClipBChecked) {\n            setClipboard(\"slots: \" + slots);\n        }\n    }\n\n    useEffect(()=>{\n\n        console.log('useeffect - unitname:', unitName,' size: ', size);\n    });\n\n    const generateOrAdd = (event) => {\n        if (!unitName)\n            setWarUnitName(true);\n        if (!size)\n            setWarSize(true);\n        console.log('in generate: ', size,' :--: ',unitName);\n        if (!size || !unitName)\n            return;\n\n        // console.log('in generate: ', JSON.parse(st));\n        switch (event.target.id) {\n            case 'button1':\n                addToSlots();\n                break;\n            case 'button2':\n                setData();\n                break;\n        }\n    }\n\n    return (\n        <SimpleFlexWrapper top=\"50px\" >\n            <WrapAreas>\n\n                <ConfigWrapper>\n                    <ConfigSetting>\n                        <Slider name={\"Use data for config generation\"} addSpaceH='4px' checked={isForConfigGeneration} onChange={() => setIsForConfigGeneration(!isForConfigGeneration)} />\n                        <Distance />    <Slider name={\"Save to clipboard\"} addSpaceH='4px' checked={isClipBChecked} onChange={() => setIsClipBChecked(!isClipBChecked)} />\n                    </ConfigSetting>\n                </ConfigWrapper>\n                <UnitName marginLR='0' onChange={(e) => setUnitName(e.target.value)} />\n                <Warning show={warUnitName} top='-40px'>Unit name is required</Warning>\n                <StandardInput marginLR='0' width='100%' placeholder=\"Initially expanded\" onChange={(e) => setInExpand(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Priority load\" onChange={(e) => setPriorityLoad(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Collapse empty div\" onChange={(e) => setCollapseEDiv(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Header bidding\" onChange={(e) => setHeaderBidding(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Lazy load\" onChange={(e) => setLazyLoad(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Ignore\" onChange={(e) => setIgnore(e.target.value)} />\n                < DistanceInput />\n                <InputField placeholder=\"Size\" height=\"15%\" onChange={(e) => setSize(e.target.value)} />\n                <Warning show={warSize} top='10px' marginB='10px' >Size is required</Warning>\n                <InputField placeholder=\"Size Mapping\" onChange={(e) => setSizeMapping(e.target.value)} />\n                <InputField placeholder=\"Targeting\" onChange={(e) => setTargeting(e.target.value)} />\n                <OutputField style={{ color: (output === \"Output\") ? \" grey\" : null }} dangerouslySetInnerHTML={{ __html: output }}></OutputField>\n                <ButtonArea name1={\"Add Unit\"} name2={\"Generate\"} color1='#ffc107' onClick={generateOrAdd} top=\"14px\" justify=\"flex-end\" />\n            </WrapAreas>\n        </SimpleFlexWrapper >\n    );\n}\n\nexport { SlotsGeneration };\n"]},"metadata":{},"sourceType":"module"}