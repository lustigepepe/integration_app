{"ast":null,"code":"var _jsxFileName = \"/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\nimport { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/FlexWrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown'; // import { configGenration } from '../services/ConfigGeneration'\n\nimport { configGeneration } from '../services/CGenerationService';\nconst InputField = styled(InputArea)`\n    flex: 0 0 49%;\n    height: 30vh;\n    margin-bottom: 28px;\n    margin-top: 14px;\n    outline: none;\n    @media(max-width: 1363px) {\n        flex: 0 0 48%;\n    }\n    @media(max-width: 550) {\n        flex: 0 0 46%;\n    }\n`;\nconst DistanceInput = styled.div`\n    width: 1%;\n`;\nconst OutputField = styled(OutputArea)`\n    height: 30vh;\n`;\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1439px) {\n            max-width: 70%;\n    }\n    @media(max-width: 1400px) {\n            flex-flow: column;\n            min-width: 229px\n    }\n`;\n\nconst inputFromValue = (configString, slotString) => {\n  var _config, _slots;\n\n  if (typeof configString === \"string\") {\n    _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n    _config = _config.replace(/'/g, '\"');\n    _config = JSON.parse(_config);\n  }\n\n  if (typeof slotString === \"string\") {\n    _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n    _slots = _slots.replace(/'/g, '\"');\n    _slots = JSON.parse(_slots);\n  }\n\n  return {\n    config: _config ? _config : [],\n    slots: _slots ? _slots : []\n  };\n};\n\nconst ConfigGeneration = () => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [output, setOutput] = useState(\"Output\");\n  const [inConfig, setInConfig] = useState([]);\n  const [inSlots, setInSlots] = useState([]);\n  const [isClipBChecked, setIsClipBChecked] = useState(true);\n  const [isRopChecked, setIsRopChecked] = useState(true);\n  const [sSp, setSSp] = useState('criteo');\n  const sspNames = ['criteo', 'yieldlab'];\n\n  const configResult = () => {// setOutput();\n  };\n\n  const generate = () => {\n    var te = inputFromValue(inConfig.slice(), inSlots.slice()); // console.log(te.config, '  ', te.slots);\n    // setOutput(configGeneration(inputFromValue(inConfig, inSlots), sSp, isRopChecked));\n    // setOutput(configGeneration({ config: inConfig, slots: inSlots }, sSp, isRopChecked));\n  };\n\n  return React.createElement(SimpleFlexWrapper, {\n    top: \"50px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(WrapAreas, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(ConfigSetting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    name: \"ROP\",\n    changeDesign: true,\n    checked: isRopChecked,\n    onChange: () => setIsRopChecked(!isRopChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(Slider, {\n    name: \"Save to clipboard\",\n    checked: isClipBChecked,\n    onChange: () => setIsClipBChecked(!isClipBChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(Dropdown, {\n    name: \"Choose SSP\",\n    sspNames: sspNames,\n    onChange: e => setSSp(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(SimpleFlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(InputField, {\n    placeholder: \"Input Config: openX\",\n    onChange: e => setInConfig(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(DistanceInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Input Slots: openX\",\n    onChange: e => setInSlots(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(OutputField, {\n    style: {\n      color: output === \"Output\" ? \" grey\" : null\n    },\n    dangerouslySetInnerHTML: {\n      __html: output\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Generate\",\n    onClick: generate,\n    top: \"14px\",\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })));\n};\n\nexport { ConfigGeneration };","map":{"version":3,"sources":["/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js"],"names":["React","useState","useEffect","styled","InputArea","OutputArea","Button","Slider","ColumnFlexWrapper","SimpleFlexWrapper","WrapAreas","Dropdown","configGeneration","InputField","DistanceInput","div","OutputField","ConfigSetting","inputFromValue","configString","slotString","_config","_slots","replace","JSON","parse","config","slots","ConfigGeneration","output","setOutput","inConfig","setInConfig","inSlots","setInSlots","isClipBChecked","setIsClipBChecked","isRopChecked","setIsRopChecked","sSp","setSSp","sspNames","configResult","generate","te","slice","e","target","value","color","__html"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\nimport { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/FlexWrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown';\n// import { configGenration } from '../services/ConfigGeneration'\nimport { configGeneration } from '../services/CGenerationService';\n\n\nconst InputField = styled(InputArea)`\n    flex: 0 0 49%;\n    height: 30vh;\n    margin-bottom: 28px;\n    margin-top: 14px;\n    outline: none;\n    @media(max-width: 1363px) {\n        flex: 0 0 48%;\n    }\n    @media(max-width: 550) {\n        flex: 0 0 46%;\n    }\n`;\n\nconst DistanceInput = styled.div`\n    width: 1%;\n`;\n\nconst OutputField = styled(OutputArea)`\n    height: 30vh;\n`;\n\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1439px) {\n            max-width: 70%;\n    }\n    @media(max-width: 1400px) {\n            flex-flow: column;\n            min-width: 229px\n    }\n`;\n\nconst inputFromValue = (configString, slotString) => {\n    var _config, _slots;\n    if (typeof configString === \"string\") {\n\n        _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n        _config = _config.replace(/'/g, '\"');\n        _config = JSON.parse(_config);\n    }\n    if (typeof slotString === \"string\") {\n\n        _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n        _slots = _slots.replace(/'/g, '\"');\n        _slots = JSON.parse(_slots);\n    }\n    return { config: _config ? _config : [], slots: _slots ? _slots : [] };\n\n}\n\nconst ConfigGeneration = () => {\n    // Declare a new state variable, which we'll call \"count\"\n    const [output, setOutput] = useState(\"Output\");\n    const [inConfig, setInConfig] = useState([]);\n    const [inSlots, setInSlots] = useState([]);\n    const [isClipBChecked, setIsClipBChecked] = useState(true);\n    const [isRopChecked, setIsRopChecked] = useState(true);\n    const [sSp, setSSp] = useState('criteo');\n\n    const sspNames = ['criteo', 'yieldlab'];\n    const configResult = () => {\n        // setOutput();\n    }\n\n    const generate = () => {\n\n        var te = inputFromValue(inConfig.slice(), inSlots.slice());\n        // console.log(te.config, '  ', te.slots);\n\n        // setOutput(configGeneration(inputFromValue(inConfig, inSlots), sSp, isRopChecked));\n        // setOutput(configGeneration({ config: inConfig, slots: inSlots }, sSp, isRopChecked));\n    }\n\n    return (\n        <SimpleFlexWrapper top=\"50px\">\n            <WrapAreas>\n                <ConfigSetting>\n                    <Slider name={\"ROP\"} changeDesign={true} checked={isRopChecked} onChange={() => setIsRopChecked(!isRopChecked)} />\n                    <Slider name={\"Save to clipboard\"} checked={isClipBChecked} onChange={() => setIsClipBChecked(!isClipBChecked)} />\n                    <Dropdown name={\"Choose SSP\"} sspNames={sspNames} onChange={(e) => setSSp(e.target.value)} />\n                </ConfigSetting>\n                <SimpleFlexWrapper>\n                    <InputField placeholder=\"Input Config: openX\" onChange={(e) => setInConfig(e.target.value)} />\n                    < DistanceInput />\n                    <InputField placeholder=\"Input Slots: openX\" onChange={(e) => setInSlots(e.target.value)} />\n                </SimpleFlexWrapper>\n                <OutputField style={{ color: (output === \"Output\") ? \" grey\" : null }} dangerouslySetInnerHTML={{ __html: output }}></OutputField>\n                <Button name={\"Generate\"} onClick={generate} top=\"14px\" justify=\"flex-end\" />\n            </WrapAreas>\n        </SimpleFlexWrapper>\n    );\n}\n\nexport { ConfigGeneration };\n"]},"metadata":{},"sourceType":"module"}