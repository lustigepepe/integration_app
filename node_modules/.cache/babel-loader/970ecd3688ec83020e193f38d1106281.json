{"ast":null,"code":"var _jsxFileName = \"/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\nimport { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/FlexWrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown'; // import { configGenration } from '../services/ConfigGeneration'\n\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helper';\nconst InputField = styled(InputArea)`\n    flex: 0 0 49%;\n    height: 30vh;\n    margin-bottom: 28px;\n    margin-top: 14px;\n    outline: none;\n    @media(max-width: 1363px) {\n        flex: 0 0 48%;\n    }\n    @media(max-width: 550) {\n        flex: 0 0 46%;\n    }\n`;\nconst ConfigDropdown = styled(Dropdown)`\n\n`;\nconst InputPageName = styled(InputField)`\n    flex: 0 0 150px;\n    height: 24px;\n    resize: none;\n    border: none;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    margin: 0;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    @media(max-width: 1401px) {\n        flex: 0 0 10%;\n    }\n\n`;\nconst DistanceInput = styled.div`\n    width: 1%;\n`;\nconst OutputField = styled(OutputArea)`\n    height: 30vh;\n`;\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 90%;\n    @media(max-width: 1439px) {\n            max-width: 70%;\n    }\n    @media(max-width: 1400px) {\n            flex-flow: column;\n            min-width: 229px\n    }\n`;\n\nconst inputFromValue = (configString, slotString, pageName) => {\n  var _config, _slots;\n\n  if (typeof configString === \"string\") {\n    _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n    _config = _config.replace(/'/g, '\"');\n\n    try {\n      _config = JSON.parse(_config);\n    } catch (ex) {\n      alert('Config is not valid JSON \\nPlease check the console for more detail');\n      console.error(ex);\n    }\n  }\n\n  if (typeof slotString === \"string\") {\n    _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n    _slots = _slots.replace(/'/g, '\"');\n\n    try {\n      _slots = JSON.parse(_slots);\n    } catch (ex) {\n      alert('Slots are not valid JSON \\nPlease check the console for more detail');\n      console.error(ex);\n    }\n  }\n\n  if (typeof _slots === \"string\") _slots = null;\n  if (typeof _config === \"string\") _config = null;\n\n  if (pageName.length < 1) {\n    try {\n      pageName = window.prompt('Please insert page name');\n    } catch (ex) {\n      console.error(ex);\n    }\n  }\n\n  return {\n    config: _config ? _config : [],\n    slots: _slots ? _slots : [],\n    pageName\n  };\n};\n\nconst ConfigGeneration = () => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [output, setOutput] = useState(\"Output\");\n  const [inConfig, setInConfig] = useState([]);\n  const [inSlots, setInSlots] = useState([]);\n  const [isClipBChecked, setIsClipBChecked] = useState(true);\n  const [isRopChecked, setIsRopChecked] = useState(true);\n  const [inSsp, setSsp] = useState('criteo');\n  const [inPageName, setInPageName] = useState('');\n  const sspNames = [];\n\n  for (let [key, value] of Object.entries(bidder)) {\n    sspNames.push(value);\n  }\n\n  const generate = () => {\n    const outText = configGeneration(inputFromValue(inConfig, inSlots, inPageName), inSsp, isRopChecked);\n    setOutput(outText);\n\n    if (isClipBChecked) {\n      navigator.clipboard.writeText('outText').then(function () {\n        console.log(\"Copied to clipboard successfully!\");\n      }, function () {\n        console.error(\"Unable to write to clipboard.\");\n      });\n    }\n  };\n\n  return React.createElement(SimpleFlexWrapper, {\n    top: \"50px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(WrapAreas, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(ConfigSetting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    name: \"ROP\",\n    changeDesign: true,\n    checked: isRopChecked,\n    onChange: () => setIsRopChecked(!isRopChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), React.createElement(Slider, {\n    name: \"Save to clipboard\",\n    checked: isClipBChecked,\n    onChange: () => setIsClipBChecked(!isClipBChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), React.createElement(ConfigDropdown, {\n    name: \"Choose SSP\",\n    sspNames: sspNames,\n    onChange: e => setSsp(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), React.createElement(InputPageName, {\n    placeholder: \"Page name\",\n    onChange: e => setInPageName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })), React.createElement(SimpleFlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(InputField, {\n    placeholder: \"Input Config: openX\",\n    onChange: e => setInConfig(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(DistanceInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Input Slots: openX\",\n    onChange: e => setInSlots(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })), React.createElement(OutputField, {\n    style: {\n      color: output === \"Output\" ? \" grey\" : null\n    },\n    dangerouslySetInnerHTML: {\n      __html: output\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Generate\",\n    onClick: generate,\n    top: \"14px\",\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  })));\n};\n\nexport { ConfigGeneration };","map":{"version":3,"sources":["/Users/hagen.handtke/Documents/urban_integration/src/components/ConfigGeneration.js"],"names":["React","useState","styled","InputArea","OutputArea","Button","Slider","fontSetting","ColumnFlexWrapper","SimpleFlexWrapper","WrapAreas","Dropdown","configGeneration","bidder","InputField","ConfigDropdown","InputPageName","DistanceInput","div","OutputField","ConfigSetting","inputFromValue","configString","slotString","pageName","_config","_slots","replace","JSON","parse","ex","alert","console","error","length","window","prompt","config","slots","ConfigGeneration","output","setOutput","inConfig","setInConfig","inSlots","setInSlots","isClipBChecked","setIsClipBChecked","isRopChecked","setIsRopChecked","inSsp","setSsp","inPageName","setInPageName","sspNames","key","value","Object","entries","push","generate","outText","navigator","clipboard","writeText","then","log","e","target","color","__html"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\nimport { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/FlexWrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown';\n// import { configGenration } from '../services/ConfigGeneration'\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helper';\n\n\nconst InputField = styled(InputArea)`\n    flex: 0 0 49%;\n    height: 30vh;\n    margin-bottom: 28px;\n    margin-top: 14px;\n    outline: none;\n    @media(max-width: 1363px) {\n        flex: 0 0 48%;\n    }\n    @media(max-width: 550) {\n        flex: 0 0 46%;\n    }\n`;\n\nconst ConfigDropdown = styled(Dropdown)`\n\n`;\nconst InputPageName = styled(InputField)`\n    flex: 0 0 150px;\n    height: 24px;\n    resize: none;\n    border: none;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    margin: 0;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    @media(max-width: 1401px) {\n        flex: 0 0 10%;\n    }\n\n`;\n\nconst DistanceInput = styled.div`\n    width: 1%;\n`;\n\nconst OutputField = styled(OutputArea)`\n    height: 30vh;\n`;\n\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 90%;\n    @media(max-width: 1439px) {\n            max-width: 70%;\n    }\n    @media(max-width: 1400px) {\n            flex-flow: column;\n            min-width: 229px\n    }\n`;\n\nconst inputFromValue = (configString, slotString, pageName) => {\n    var _config, _slots;\n    if (typeof configString === \"string\") {\n        _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n        _config = _config.replace(/'/g, '\"');\n        try {\n            _config = JSON.parse(_config);\n        } catch (ex) {\n            alert('Config is not valid JSON \\nPlease check the console for more detail');\n            console.error(ex);\n        }\n    }\n    if (typeof slotString === \"string\") {\n        _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n        _slots = _slots.replace(/'/g, '\"');\n        try {\n            _slots = JSON.parse(_slots);\n        } catch (ex) {\n            alert('Slots are not valid JSON \\nPlease check the console for more detail');\n            console.error(ex);\n        }\n    }\n    if (typeof _slots === \"string\")\n        _slots = null;\n    if (typeof _config === \"string\")\n        _config = null;\n    if (pageName.length < 1) {\n        try {\n            pageName = window.prompt('Please insert page name');\n\n        } catch (ex) { console.error(ex); }\n    }\n\n    return { config: _config ? _config : [], slots: _slots ? _slots : [], pageName };\n\n}\n\nconst ConfigGeneration = () => {\n    // Declare a new state variable, which we'll call \"count\"\n    const [output, setOutput] = useState(\"Output\");\n    const [inConfig, setInConfig] = useState([]);\n    const [inSlots, setInSlots] = useState([]);\n    const [isClipBChecked, setIsClipBChecked] = useState(true);\n    const [isRopChecked, setIsRopChecked] = useState(true);\n    const [inSsp, setSsp] = useState('criteo');\n    const [inPageName, setInPageName] = useState('');\n\n    const sspNames = [];\n    for (let [key, value] of Object.entries(bidder)) {\n        sspNames.push(value);\n    }\n\n    const generate = () => {\n        const outText = configGeneration(inputFromValue(inConfig, inSlots, inPageName), inSsp, isRopChecked);\n        setOutput(outText);\n        if (isClipBChecked) {\n            navigator.clipboard.writeText('outText').then(function () {\n                console.log(\"Copied to clipboard successfully!\");\n            }, function () {\n                console.error(\"Unable to write to clipboard.\");\n            });\n        }\n    }\n\n    return (\n        <SimpleFlexWrapper top=\"50px\">\n            <WrapAreas>\n                <ConfigSetting>\n                    <Slider name={\"ROP\"} changeDesign={true} checked={isRopChecked} onChange={() => setIsRopChecked(!isRopChecked)} />\n                    <Slider name={\"Save to clipboard\"} checked={isClipBChecked} onChange={() => setIsClipBChecked(!isClipBChecked)} />\n                    <ConfigDropdown name={\"Choose SSP\"} sspNames={sspNames} onChange={(e) => setSsp(e.target.value)} />\n                    <InputPageName placeholder=\"Page name\" onChange={(e) => setInPageName(e.target.value)} />\n\n                </ConfigSetting>\n                <SimpleFlexWrapper>\n                    <InputField placeholder=\"Input Config: openX\" onChange={(e) => setInConfig(e.target.value)} />\n                    < DistanceInput />\n                    <InputField placeholder=\"Input Slots: openX\" onChange={(e) => setInSlots(e.target.value)} />\n                </SimpleFlexWrapper>\n                <OutputField style={{ color: (output === \"Output\") ? \" grey\" : null }} dangerouslySetInnerHTML={{ __html: output }}></OutputField>\n                <Button name={\"Generate\"} onClick={generate} top=\"14px\" justify=\"flex-end\" />\n            </WrapAreas>\n        </SimpleFlexWrapper>\n    );\n}\n\nexport { ConfigGeneration };\n"]},"metadata":{},"sourceType":"module"}