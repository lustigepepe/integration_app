{"ast":null,"code":"var _jsxFileName = \"/Users/hagen.handtke/Documents/urban_integration/src/components/SlotsGeneration.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields'; // import { Button } from '../styles/Buttons';\n\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { InputText } from '../styles/InputOutputFields';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/Wrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown'; // import { configGenration } from '../services/ConfigGeneration'\n\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helpers';\nimport { StandardInput } from '../styles/molecules/StandardInput';\nimport { ButtonElement } from '../styles/Buttons';\nconst InputField = styled(InputArea)`\n    flex: 0 0 ${props => props.height ? props.height : '30%'};\n    margin-top: 14px;\n    outline: none;\n    @media(max-width: 1363px) {\n        flex: 0 0 48%;\n    }\n    @media(max-width: 550) {\n        flex: 0 0 46%;\n    }\n`;\nconst UnitNameWrapper = styled.div`\n    margin: 20px 0  50px 0;\n`;\n\nconst ButtonArea = props => React.createElement(SimpleFlexWrapper, {\n  justify: props.justify,\n  top: props.top,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, React.createElement(ButtonElement, Object.assign({\n  bColor: props.color1\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}), props.name1), React.createElement(ButtonElement, Object.assign({\n  bColor: props.color2,\n  marginL: \"15px\"\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}), props.name2));\n\nconst UnitName = props => React.createElement(UnitNameWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}, React.createElement(InputText, {\n  marginLR: props.marginLR,\n  style: {\n    width: '100%'\n  },\n  placeholder: \"Unit name\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}));\n\nconst InputPageName = styled(InputField)`\n    flex: 0 0 150px;\n    height: 24px;\n    resize: none;\n    border: none;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    margin: 0;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    @media(max-width: 1401px) {\n        flex: 0 0 10%;\n    }\n`;\nconst DistanceInput = styled.div`\n    margin-top: 14px;\n`;\nconst OutputField = styled(OutputArea)`\n    flex: 0 0 30vh;\n    margin-top: 14px;\n    padding: 2px 0 0 2px;\n\n`;\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1624px) {\n        max-width: 70%;\n\n    }\n    @media(max-width: 1160px) {\n        flex-flow: column;\n        // min-width: 229px\n        max-width: 40px;\n    }\n`;\nconst ConfigWrapper = styled.div`\n    margin: 50px 0 0 0;\n`;\nconst Distance = styled.div`\n    width: 15px;\n`;\n\nconst SlotsGeneration = () => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [output, setOutput] = useState(\"Output\");\n  const [inConfig, setInConfig] = useState([]);\n  const [inSlots, setInSlots] = useState([]);\n  const [isClipBChecked, setIsClipBChecked] = useState(true);\n  const [isForConfigGeneration, setIsForConfigGeneration] = useState(true);\n  const [inSsp, setSsp] = useState('criteo');\n  const [inPageName, setInPageName] = useState('');\n  const [unitName, setUnitName] = useState('');\n  const [inExpand, setInExpand] = useState('');\n  const [priorityLoad, setPriorityLoad] = useState('');\n  const [collapseEDiv, setCollapseEDiv] = useState('');\n  const [headerBidding, setHeaderBidding] = useState('');\n  const [lazyLoad, setLazyLoad] = useState('');\n  const [ignore, setIgnore] = useState('');\n  const [size, setSize] = useState('');\n  const [sizeMapping, setSizeMapping] = useState('');\n  const [targeting, setTargeting] = useState('');\n  const sspNames = [];\n\n  for (let [key, value] of Object.entries(bidder)) {\n    sspNames.push(value);\n  }\n\n  const inputFromValue = (configString, slotString, pageName) => {\n    var _config, _slots;\n\n    var _latePageN = false;\n\n    if (typeof configString === \"string\") {\n      _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n      _config = _config.replace(/'/g, '\"');\n\n      try {\n        _config = JSON.parse(_config);\n      } catch (ex) {\n        alert('Config is not valid JSON \\nPlease check the console for more detail');\n        console.error(ex);\n      }\n    }\n\n    if (typeof slotString === \"string\") {\n      _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n      _slots = _slots.replace(/'/g, '\"');\n\n      try {\n        _slots = JSON.parse(_slots);\n      } catch (ex) {\n        alert('Slots are not valid JSON \\nPlease check the console for more detail');\n        console.error(ex);\n      }\n    }\n\n    if (typeof _slots === \"string\") _slots = null;\n    if (typeof _config === \"string\") _config = null;\n\n    if (pageName.length < 1) {\n      try {\n        _latePageN = true;\n        pageName = window.prompt('Please insert page name');\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n\n    return {\n      configData: {\n        config: _config ? _config : [],\n        slots: _slots ? _slots : [],\n        pageName\n      },\n      latePageN: _latePageN\n    };\n  };\n\n  const setClipboard = outText => {\n    navigator.clipboard.writeText(outText).then(function () {\n      console.log(\"Copied to clipboard successfully!\");\n    }, function () {\n      console.error(\"Unable to write to clipboard.\");\n    });\n  };\n\n  const generateOrAdd = () => {\n    const {\n      configData,\n      latePageN\n    } = inputFromValue(inConfig, inSlots, inPageName); // const outText = configGeneration(configData, inSsp, isRopChecked);\n\n    const outText = \"\";\n    setOutput(outText);\n\n    if (isClipBChecked) {\n      if (latePageN) {\n        // after windows function prompt it takes a while for using the windows navigator!\n        setTimeout(() => {\n          setClipboard(outText);\n        }, 180);\n      } else {\n        setClipboard(outText);\n      }\n    }\n  };\n\n  return React.createElement(SimpleFlexWrapper, {\n    top: \"50px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(WrapAreas, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(ConfigWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(ConfigSetting, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    name: \"Use data for config generation\",\n    addSpaceH: \"4px\",\n    checked: isForConfigGeneration,\n    onChange: () => setIsForConfigGeneration(!isForConfigGeneration),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }), React.createElement(Distance, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }), \"    \", React.createElement(Slider, {\n    name: \"Save to clipboard\",\n    addSpaceH: \"4px\",\n    checked: isClipBChecked,\n    onChange: () => setIsClipBChecked(!isClipBChecked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }))), React.createElement(UnitName, {\n    marginLR: \"0\",\n    onChange: e => setUnitName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    width: \"100%\",\n    placeholder: \"Initially expanded\",\n    onChange: e => setInExpand(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Priority load\",\n    onChange: e => setPriorityLoad(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Collapse empty div\",\n    onChange: e => setCollapseEDiv(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Header bidding\",\n    onChange: e => setHeaderBidding(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Lazy load\",\n    onChange: e => setLazyLoad(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }), React.createElement(StandardInput, {\n    marginLR: \"0\",\n    placeholder: \"Ignore\",\n    onChange: e => setIgnore(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }), React.createElement(DistanceInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Size\",\n    height: \"15%\",\n    onChange: e => setSize(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Size Mapping\",\n    onChange: e => setSizeMapping(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    placeholder: \"Targeting\",\n    onChange: e => setTargeting(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }), React.createElement(OutputField, {\n    style: {\n      color: output === \"Output\" ? \" grey\" : null\n    },\n    dangerouslySetInnerHTML: {\n      __html: output\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }), React.createElement(ButtonArea, {\n    name1: \"Add Unit\",\n    name2: \"Generate\",\n    color1: \"#ffc107\",\n    onClick: generateOrAdd,\n    top: \"14px\",\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  })));\n};\n\nexport { SlotsGeneration };","map":{"version":3,"sources":["/Users/hagen.handtke/Documents/urban_integration/src/components/SlotsGeneration.js"],"names":["React","useState","styled","InputArea","OutputArea","Slider","fontSetting","InputText","ColumnFlexWrapper","SimpleFlexWrapper","WrapAreas","Dropdown","configGeneration","bidder","StandardInput","ButtonElement","InputField","props","height","UnitNameWrapper","div","ButtonArea","justify","top","color1","name1","color2","name2","UnitName","marginLR","width","InputPageName","DistanceInput","OutputField","ConfigSetting","ConfigWrapper","Distance","SlotsGeneration","output","setOutput","inConfig","setInConfig","inSlots","setInSlots","isClipBChecked","setIsClipBChecked","isForConfigGeneration","setIsForConfigGeneration","inSsp","setSsp","inPageName","setInPageName","unitName","setUnitName","inExpand","setInExpand","priorityLoad","setPriorityLoad","collapseEDiv","setCollapseEDiv","headerBidding","setHeaderBidding","lazyLoad","setLazyLoad","ignore","setIgnore","size","setSize","sizeMapping","setSizeMapping","targeting","setTargeting","sspNames","key","value","Object","entries","push","inputFromValue","configString","slotString","pageName","_config","_slots","_latePageN","replace","JSON","parse","ex","alert","console","error","length","window","prompt","configData","config","slots","latePageN","setClipboard","outText","navigator","clipboard","writeText","then","log","generateOrAdd","setTimeout","e","target","color","__html"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { InputArea, OutputArea } from '../styles/InputOutputFields';\n// import { Button } from '../styles/Buttons';\nimport { Slider } from '../styles/molecules/Slider';\nimport { fontSetting } from '../styles/LabelAndFont';\nimport { InputText } from '../styles/InputOutputFields';\nimport { ColumnFlexWrapper, SimpleFlexWrapper, WrapAreas } from '../styles/Wrapper';\nimport { Dropdown } from '../styles/molecules/Dropdown';\n// import { configGenration } from '../services/ConfigGeneration'\nimport { configGeneration } from '../services/CGenerationService';\nimport { bidder } from '../services/Helpers';\nimport { StandardInput } from '../styles/molecules/StandardInput';\n\nimport { ButtonElement } from '../styles/Buttons';\nconst InputField = styled(InputArea)`\n    flex: 0 0 ${props => props.height ? props.height : '30%'};\n    margin-top: 14px;\n    outline: none;\n    @media(max-width: 1363px) {\n        flex: 0 0 48%;\n    }\n    @media(max-width: 550) {\n        flex: 0 0 46%;\n    }\n`;\n\nconst UnitNameWrapper = styled.div`\n    margin: 20px 0  50px 0;\n`;\n\nconst ButtonArea = (props) => (\n    <SimpleFlexWrapper justify={props.justify} top={props.top}>\n        <ButtonElement bColor={props.color1} {...props} >{props.name1}</ButtonElement>\n        <ButtonElement bColor={props.color2} marginL='15px' {...props} >{props.name2}</ButtonElement>\n    </SimpleFlexWrapper>\n);\n\nconst UnitName = (props) => (\n    <UnitNameWrapper>\n        <InputText marginLR={props.marginLR} style={{ width: '100%' }} placeholder=\"Unit name\" />\n    </UnitNameWrapper>\n);\n\nconst InputPageName = styled(InputField)`\n    flex: 0 0 150px;\n    height: 24px;\n    resize: none;\n    border: none;\n    border-bottom: 1px solid  ;\n    padding: 0 0 4.2px;\n    margin: 0;\n    border-radius: 0;\n    overflow: auto;\n    white-space: nowrap;\n    font-weight: 500;\n    ${fontSetting};\n    @media(max-width: 1401px) {\n        flex: 0 0 10%;\n    }\n`;\n\nconst DistanceInput = styled.div`\n    margin-top: 14px;\n`;\n\nconst OutputField = styled(OutputArea)`\n    flex: 0 0 30vh;\n    margin-top: 14px;\n    padding: 2px 0 0 2px;\n\n`;\n\nconst ConfigSetting = styled(SimpleFlexWrapper)`\n    justify-content: flex-start;\n    justify-content: space-between;\n    max-width: 60%;\n    @media(max-width: 1624px) {\n        max-width: 70%;\n\n    }\n    @media(max-width: 1160px) {\n        flex-flow: column;\n        // min-width: 229px\n        max-width: 40px;\n    }\n`;\n\nconst ConfigWrapper = styled.div`\n    margin: 50px 0 0 0;\n`;\n\nconst Distance = styled.div`\n    width: 15px;\n`;\n\nconst SlotsGeneration = () => {\n    // Declare a new state variable, which we'll call \"count\"\n    const [output, setOutput] = useState(\"Output\");\n    const [inConfig, setInConfig] = useState([]);\n    const [inSlots, setInSlots] = useState([]);\n    const [isClipBChecked, setIsClipBChecked] = useState(true);\n    const [isForConfigGeneration, setIsForConfigGeneration] = useState(true);\n    const [inSsp, setSsp] = useState('criteo');\n    const [inPageName, setInPageName] = useState('');\n\n    const [unitName, setUnitName] = useState('');\n\n    const [inExpand, setInExpand] = useState('');\n    const [priorityLoad, setPriorityLoad] = useState('');\n    const [collapseEDiv, setCollapseEDiv] = useState('');\n    const [headerBidding, setHeaderBidding] = useState('');\n    const [lazyLoad, setLazyLoad] = useState('');\n    const [ignore, setIgnore] = useState('');\n    const [size, setSize] = useState('');\n    const [sizeMapping, setSizeMapping] = useState('');\n    const [targeting, setTargeting] = useState('');\n\n\n    const sspNames = [];\n    for (let [key, value] of Object.entries(bidder)) {\n        sspNames.push(value);\n    }\n\n\n    const inputFromValue = (configString, slotString, pageName) => {\n        var _config, _slots;\n        var _latePageN = false;\n        if (typeof configString === \"string\") {\n            _config = configString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n            _config = _config.replace(/'/g, '\"');\n            try {\n                _config = JSON.parse(_config);\n            } catch (ex) {\n                alert('Config is not valid JSON \\nPlease check the console for more detail');\n                console.error(ex);\n            }\n        }\n        if (typeof slotString === \"string\") {\n            _slots = slotString.replace(/([a-zA-Z0-9]+?):/g, '\"$1\":');\n            _slots = _slots.replace(/'/g, '\"');\n            try {\n                _slots = JSON.parse(_slots);\n            } catch (ex) {\n                alert('Slots are not valid JSON \\nPlease check the console for more detail');\n                console.error(ex);\n            }\n        }\n        if (typeof _slots === \"string\")\n            _slots = null;\n        if (typeof _config === \"string\")\n            _config = null;\n        if (pageName.length < 1) {\n            try {\n                _latePageN = true;\n                pageName = window.prompt('Please insert page name');\n            } catch (ex) {\n                console.error(ex);\n            }\n        }\n\n        return { configData: { config: _config ? _config : [], slots: _slots ? _slots : [], pageName }, latePageN: _latePageN };\n\n    }\n    const setClipboard = (outText) => {\n        navigator.clipboard.writeText(outText).then(function () {\n            console.log(\"Copied to clipboard successfully!\");\n        }, function () {\n            console.error(\"Unable to write to clipboard.\");\n        });\n    }\n\n    const generateOrAdd = () => {\n        const { configData, latePageN } = inputFromValue(inConfig, inSlots, inPageName);\n        // const outText = configGeneration(configData, inSsp, isRopChecked);\n        const outText = \"\";\n        setOutput(outText);\n        if (isClipBChecked) {\n            if (latePageN) {\n                // after windows function prompt it takes a while for using the windows navigator!\n                setTimeout(() => { setClipboard(outText); }, 180)\n            } else {\n                setClipboard(outText);\n            }\n        }\n    }\n\n    return (\n        <SimpleFlexWrapper top=\"50px\" >\n            <WrapAreas>\n                <ConfigWrapper>\n                    <ConfigSetting>\n                        <Slider name={\"Use data for config generation\"} addSpaceH='4px' checked={isForConfigGeneration} onChange={() => setIsForConfigGeneration(!isForConfigGeneration)} />\n                        <Distance />    <Slider name={\"Save to clipboard\"} addSpaceH='4px' checked={isClipBChecked} onChange={() => setIsClipBChecked(!isClipBChecked)} />\n                    </ConfigSetting>\n                </ConfigWrapper>\n                <UnitName marginLR='0' onChange={(e) => setUnitName(e.target.value)} />\n                <StandardInput marginLR='0' width='100%' placeholder=\"Initially expanded\" onChange={(e) => setInExpand(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Priority load\" onChange={(e) => setPriorityLoad(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Collapse empty div\" onChange={(e) => setCollapseEDiv(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Header bidding\" onChange={(e) => setHeaderBidding(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Lazy load\" onChange={(e) => setLazyLoad(e.target.value)} />\n                <StandardInput marginLR='0' placeholder=\"Ignore\" onChange={(e) => setIgnore(e.target.value)} />\n                < DistanceInput />\n                <InputField placeholder=\"Size\" height=\"15%\" onChange={(e) => setSize(e.target.value)} />\n                <InputField placeholder=\"Size Mapping\" onChange={(e) => setSizeMapping(e.target.value)} />\n                <InputField placeholder=\"Targeting\" onChange={(e) => setTargeting(e.target.value)} />\n                <OutputField style={{ color: (output === \"Output\") ? \" grey\" : null }} dangerouslySetInnerHTML={{ __html: output }}></OutputField>\n                <ButtonArea name1={\"Add Unit\"} name2={\"Generate\"} color1='#ffc107'  onClick={generateOrAdd} top=\"14px\" justify=\"flex-end\" />\n            </WrapAreas>\n        </SimpleFlexWrapper >\n    );\n}\n\nexport { SlotsGeneration };\n"]},"metadata":{},"sourceType":"module"}